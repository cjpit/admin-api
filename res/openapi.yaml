openapi: 3.0.0
info:
  title: Grammm Admin API
  version: 0.9.1
servers:
  - url: '/api/v1'
    description: Default deployment path

paths:
  /status:
    summary: API state check
    get:
      summary: Check API connectivity and status
      tags:
        - Misc
      responses:
        '200':
          description: API status message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: API is operational

  /about:
    get:
      summary: Get general information about the backend
      tags:
        - Misc
      responses:
        '200':
          description: Return information
          content:
            application/json:
              schema:
                type: object
                properties:
                  API:
                    description: Version of the API (according to the specification)
                    type: string
                  backend:
                    description: Version of the implementation
                    type: string

  /login:
    post:
      summary: Login user
      tags:
        - Misc
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              anyOf:
                - type: object
                  required: [user, pass]
                  properties:
                    user:
                      type: string
                      description: Username
                    pass:
                      type: string
                      description: User password
                - type: string
                  description: Workaround for flask/openapi
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  grammm-auth-jwt:
                    type: string
                    description: API accesss token
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          description: Login failed
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/dashboard:
    get:
      summary: Get System dashboard data
      tags:
        - Misc
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  disks:
                    description: List of disks
                    type: array
                    items:
                      type: object
                      description: Disk statistics.
                      properties:
                        percent:
                          type: number
                          description: Percentage of used memory
                        total:
                          description: Total disk space (bytes)
                          type: integer
                        used:
                          description: Used disk space (bytes)
                          type: integer
                        free:
                          description: Free disk space (bytes)
                          type: integer
                        device:
                          type: string
                        mountpoint:
                          type: string
                        filesystem:
                          type: string
                  load:
                    type: array
                    description: Load averages (1 / 5 / 15 minutes)
                    items:
                      type: number
                  cpuPercent:
                    description: Current CPU usage in percent
                    type: object
                    properties:
                      user:
                        type: number
                        description: Percentage of user CPU time
                      system:
                        type: number
                        description: Percentage of system CPU time
                      io:
                        type: number
                        description: Percentage of CPU time used for IO operations
                      interrupt:
                        type: number
                        description: Percentage of CPU time used by interrupts
                      steal:
                        type: number
                        description: Percentage of CPU time spent waiting for the hypervisor
                      idle:
                        type: number
                        description: Idle CPU time
                  memory:
                    description: RAM statistics
                    type: object
                    properties:
                      percent:
                        description: Percent of used memory
                        type: number
                      total:
                        description: Total memory (bytes)
                        type: integer
                      free:
                        description: Unused memory (bytes)
                        type: integer
                      used:
                        description: Memory used by applications (bytes)
                        type: integer
                      buffer:
                        description: Memory used for buffers (bytes)
                        type: integer
                      cache:
                        description: Memory used for cached data (bytes)
                        type: integer
                      available:
                        description: Memory that is available for applications (bytes)
                  swap:
                    description: Swap statistics
                    type: object
                    properties:
                      percent:
                        description: Percentage of used swap memory
                        type: number
                      total:
                        description: Total swap memory (bytes)
                        type: integer
                      free:
                        description: Available swap memory (bytes)
                        type: integer
                      used:
                        description: Used swap memory (bytes)
                        type: integer
                  booted:
                    allOf:
                      - $ref: '#/components/schemas/dateTime'
                      - description: Time the machine was booted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/dashboard/services:
    get:
      summary: Get list of services
      tags:
        - Misc
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of services returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    description: List of systemd services
                    type: array
                    items:
                      $ref: '#/components/schemas/service'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/dashboard/services/{unit}:
    get:
      summary: Get information about a specific service
      tags:
        - Misc
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/systemdUnit'
      responses:
        '200':
          description: Inforamtion about service returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service'

  /system/dashboard/services/{unit}/{action}:
    post:
      summary: Send signal to a service
      tags:
        - Misc
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/systemdUnit'
        - name: action
          description: Signal to send
          in: path
          required: true
          schema:
            type: string
            enum: [start, stop, restart]
      responses:
        '201':
          description: Signal was sent
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/area_list:
    get:
      summary: Get lists of data areas
      tags:
        - System Admin
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/areaList'
                  domain:
                    $ref: '#/components/schemas/areaList'
                  independent:
                    $ref: '#/components/schemas/areaList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new data area
      tags:
        - System Admin
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/areaData'
      responses:
        '201':
          description: Data area created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/areaData'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/area_list/{ID}:
    patch:
      summary: Update data area
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/areaData'
      responses:
        '200':
          description: Data area updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/areaData'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/domains:
    get:
      summary: Get lists of domains
      tags:
        - System Admin
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new domain
      tags:
        - System Admin
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain'
      responses:
        '201':
          description: Domain created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/domains/{domainID}:
    patch:
      summary: Update domain
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain'
      responses:
        '200':
          description: Domain updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete domain
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      responses:
        '200':
          description: Domain deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/domains/{domainID}/aliases:
    get:
      summary: Get domain aliases
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      responses:
        '200':
          description: List of aliases returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aliasList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create alias for domain
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aliasname:
                  type: string
                  description: Name of the alias
      responses:
        '201':
          description: Domain alias created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alias'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/domains/aliases:
    get:
      summary: List all user aliases grouped by user
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    description: Associative array of base objects with their aliases
                    additionalProperties:
                      type: array
                      items:
                        type: object
                        properties:
                          ID:
                            $ref: '#/components/schemas/ID'
                          aliasname:
                            type: string
                          domainStatus:
                            type: integer
                            description: Status of the alias domain
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/domains/aliases/{ID}:
    delete:
      summary: Delete alias domain
      description: Marks the alias domain and all virtual users as deleted
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Deletion successful
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/roles/permissions:
    get:
      summary: Get list of available permissions
      tags:
        - System Admin
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List with permissions returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
                      description: Name of the permission

  /system/roles:
    get:
      summary: Get list of available roles
      tags:
        - System Admin
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of roles returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/adminRole'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create a new role
      tags:
        - System Admin
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adminRoleWrite'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminRole'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/roles/{ID}:
    get:
      summary: Get role
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: List of roles returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminRole'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update a role
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adminRoleWrite'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminRole'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete role
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Role deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/password:
    put:
      summary: Set domain password
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                new:
                  type: string
                  description: New password
      responses:
        '200':
          description: Domain password updated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users:
    get:
      summary: Get lists of users
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new user
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '201':
          description: Domain created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}:
    get:
      summary: Get information about a specific user
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/domainID'
      responses:
        '200':
          description: User data returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update user
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete user
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/domainID'
        - name: deleteFiles
          description: Delete user files on disk
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: User deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}/password:
    put:
      summary: Set user password
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                new:
                  type: string
                  description: New password
      responses:
        '200':
          description: User password updated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}/aliases:
    get:
      summary: Get list of user aliases
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
      responses:
        '200':
          description: List of user aliases returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aliasList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new user alias
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aliasname:
                  type: string
                  description: Name of the alias user. Domain part can be omitted, but must match domain if present.
      responses:
        '201':
          description: User alias created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alias'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'


  /domains/{domainID}/users/aliases:
    get:
      summary: List all user aliases grouped by user
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      responses:
        '200':
          description: List returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/groupedAliasList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'


  /domains/{domainID}/users/aliases/{ID}:
    delete:
      summary: Delete user alias
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: User alias deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}/roles:
    post:
      summary: Associate user with role
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roleID:
                  type: integer
                  description: ID of the role to associate
      responses:
        '201':
          description: Role associated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}/roles/{ID}:
    delete:
      summary: Remove role association
      tags:
        - System Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Role association removed
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/folders:
    get:
      summary: Get list of public folders
      parameters:
        - $ref: '#/components/parameters/domainID'
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of public folders returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/publicFolder'
    post:
      summary: Create a new public folder
      parameters:
        - $ref: '#/components/parameters/domainID'
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [displayname, container, comment]
              additionalProperties: false
              properties:
                displayname:
                  type: string
                  description: Name of the folder
                container:
                  type: string
                  description: Container class
                  enum: [IPF.Note, IPF.Contact, IPF.Appointment, IPF.Stickynote, IPF.Task]
                comment:
                  type: string
      responses:
        '201':
          description: Folder creation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicFolder'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/folders/{folderID}:
    delete:
      summary: Delete public folder
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
      responses:
        '200':
          description: Deletion successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/folders/{folderID}/owners:
    get:
      summary: Get list of folder owners
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
      responses:
        '200':
          description: List of owners returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        memberID:
                          type: integer
                          description: Member ID of the owner list
                        displayName:
                          type: string
                          description: Name of member
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Add a user to the owner list
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username]
              additionalProperties: false
              properties:
                username:
                  type: string
                  description: Username (e-mail address) to add to member list
      responses:
        '201':
          description: Creation successful
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/folders/{folderID}/owners/{memberID}:
    delete:
      summary: Remove a user from the owner list
      tags:
        - Domain Admin
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
        - name: memberID
          description: Member ID of the owner list
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Member removed
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

components:
  securitySchemes:
    JWTCookie:
      type: apiKey
      in: cookie
      name: grammm-auth-jwt
  parameters:
    ID:
      name: ID
      description: ID of the object
      in: path
      required: true
      schema:
        type: integer
    domainID:
      name: domainID
      description: ID of the domain
      in: path
      required: true
      schema:
        type: integer
    userID:
      name: userID
      description: ID of the user
      in: path
      required: true
      schema:
        type: integer
    folderID:
      name: folderID
      description: ID of the folder
      in: path
      required: true
      schema:
        type: integer
    filterID:
      name: ID
      description: Filter by ID
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/filterIntList'
    systemdUnit:
      name: unit
      description: Name of the unit to signal
      in: path
      required: true
      schema:
        type: string
  schemas:
    filterIntList:
      type: string
      pattern: '^[\d]*(,[\d]*)*$'
    ID:
      description: Unique ID of the object
      type: integer
      readOnly: true
    date:
      type: string
      pattern: '^\d{4}-\d{2}-\d{2}$'
    dateTime:
      type: string
      pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      nullable: True
    areaData:
      type: object
      additionalProperties: false
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        dataType:
          type: integer
          description: Type of data stored (0=User, 1=Domain, 2=Independent)
        masterPath:
          type: string
          maxLength: 256
          description: Path of the master data area. Can only be set on creation.
        slavePath:
          type: string
          maxLength: 256
          description: Path of slave data area. Can only be set on creation.
        accelPath:
          type: string
          maxLength: 256
          description: Path of accelerated database
          nullable: true
        maxSpace:
          type: integer
          description: Storage size in Megabytes
        maxFiles:
          type: integer
          description: Maximum number of files
          deprecated: true
        storeLevels:
          type: integer
          description: Directory structure depth
          minimum: 1
          maximum: 4
    areaList:
      type: array
      items:
        $ref: '#/components/schemas/areaData'
    domain:
      type: object
      additionalProperties: false
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        orgID:
          type: integer
          default: 0
        domainname:
          type: string
          maxLength: 64
        password:
          type: string
          default: ""
          writeOnly: True
          description: Initial password
        homedir:
          type: string
          maxLength: 128
          readOnly: True
          default: ""
        media:
          type: string
          maxLength: 64
          default: ""
        maxSize:
          type: integer
        maxUser:
          type: integer
        title:
          type: string
          maxLength: 128
          default: ""
        address:
          type: string
          maxLength: 128
          default: ""
        adminName:
          type: string
          maxLength: 32
          default: ""
        tel:
          type: string
          maxLength: 64
          default: ""
        createDay:
          allOf:
            - $ref: '#/components/schemas/date'
            - deprecated: true
        endDay:
          $ref: '#/components/schemas/date'
        domainStatus:
          type: integer
          description: Domain status (0=Normal, 1=Suspended, 2=Out Of Date, 3=Deleted)
          default: 0
        domainType:
          type: integer
          description: Domain type (0=Normal, 1=Alias)
          default: 0
        mailBackup:
          type: boolean
          description: Mail backup privilege
        mailMonitor:
          type: boolean
          description: Mail monitor privilege
        ignoreCheckingUser:
          type: boolean
          description: Ignore checking user privilege
        mailSubSystem:
          type: boolean
          description: Mail subsystem privilege
        netDisk:
          type: boolean
        areaID:
          writeOnly: True
          type: integer
          description: In which data area to create the domain. Can only be used on creation.
    user:
      type: object
      additionalProperties: false
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        areaID:
          type: integer
          description: Area to create the user directory in
        username:
          type: string
          maxLength: 128
        password:
          type: string
          description: Initial password
        realName:
          type: string
          maxLength: 32
        title:
          type: string
          maxLength: 128
        memo:
          type: string
          maxLength: 128
        domainID:
          type: integer
          readOnly: true
        groupID:
          type: integer
        maildir:
          type: string
          maxLength: 128
          readOnly: true
        maxSize:
          type: integer
        maxFile:
          type: integer
          deprecated: true
        createDay:
          $ref: '#/components/schemas/date'
        lang:
          type: string
          maxLength: 32
        timezone:
          type: string
          maxLength: 64
        mobilePhone:
          type: string
          maxLength: 20
        subType:
          type: integer
          description: Sub type (0=User, 1=Room, 2=Equipment)
        addressStatus:
          type: integer
          description: Address status (unknown)
        addressType:
          type: integer
          description: Address type (0=Normal, 1=Alias, 2=MList, 3=Virtual)
          readOnly: true
        cell:
          type: string
          maxLength: 20
        tel:
          type: string
          maxLength: 20
        nickname:
          type: string
          maxLength: 32
        homeaddress:
          type: string
          maxLength: 128
        pop3_imap:
          type: boolean
          description: POP3/IMAP privilege
        smtp:
          type: boolean
          description: SMTP privilege
        changePassword:
          type: boolean
          description: Password changing privilege
        publicAddress:
          type: boolean
          description: Public address privilege
        netDisk:
          type: boolean
          description: Network disk privilege
        roles:
          type: array
          description: List of role associated with the user
          items:
            type: object
            readOnly: true
            properties:
              ID:
                $ref: '#/components/schemas/ID'
              name:
                type: string
    publicFolder:
      type: object
      properties:
        folderid:
          type: integer
        displayname:
          type: string
        comment:
          type: string
        creationtime:
          $ref: '#/components/schemas/dateTime'
    service:
      type: object
      properties:
        state:
          type: string
        substate:
          type: string
        description:
          type: string
          nullable: true
        since:
          $ref: '#/components/schemas/dateTime'
        name:
          type: string
          description: Name of the service
        unit:
          type: string
          description: Name of the systemd unit. Required for action endpoints.
    alias:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        aliasname:
          type: string
          description: Name of the alias
        mainname:
          type: string
          description: Name of the aliased entity
    aliasList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/alias'
    groupedAliasList:
      type: object
      description: Associative array of base objects with their aliases
      additionalProperties:
        type: array
        items:
          type: object
          properties:
            ID:
              $ref: '#/components/schemas/ID'
            aliasname:
              type: string
    adminPermission:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        permission:
          type: string
    adminRole:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        description:
          type: string
          nullable: true
        permissions:
          type: array
          description: List of permissions associated with the role
          items:
            $ref: '#/components/schemas/adminPermission'
        users:
          type: array
          description: List of users associated with the role
          items:
            type: object
            properties:
              ID:
                $ref: '#/components/schemas/ID'
              username:
                type: string
    adminRoleWrite:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/adminPermission'
        users:
          type: array
          description: List of user IDs to associate with the role
          items:
            type: integer
  responses:
    ServerError:
      description: An error occured while processing the request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: String representation of the exception
    InvalidRequest:
      description: Validation of input parameters failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                description: List of errors encountered during validation
                items:
                  type: string
    DatabaseError:
      description: The database query failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Description of the error
    NotFound:
      description: The requested resource could not be found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

tags:
  - name: Domain Admin
    description: Endpoints for the domain admin interface
  - name: System Admin
    description: Endpoints for the system admin interface
  - name: Misc
    description: Miscellaneous and organizational endpoints
