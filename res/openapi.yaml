openapi: 3.0.0
info:
  title: Grammm Admin API
  version: 0.2.1
servers:
  - url: '/api/v1'
    description: Default deployment path

paths:
  /status:
    summary: API state check
    get:
      summary: Check API connectivity and status
      tags:
        - Misc
      responses:
        '200':
          description: API status message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: API is operational

  /about:
    get:
      summary: Get general information about the backend
      tags:
        - Misc
      responses:
        '200':
          description: Return information
          content:
            application/json:
              schema:
                type: object
                properties:
                  API:
                    description: Version of the API (according to the specification)
                    type: string
                  backend:
                    description: Version of the implementation
                    type: string

  /area_list:
    get:
      summary: Get lists of data areas
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/areaList'
                  domain:
                    $ref: '#/components/schemas/areaList'
                  independent:
                    $ref: '#/components/schemas/areaList'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new data area
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/areaData'
      responses:
        '201':
          description: Data area created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/areaData'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /area_list/{ID}:
    patch:
      summary: Update data area
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/areaData'
      responses:
        '200':
          description: Data area updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/areaData'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete data area
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Data area deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains:
    get:
      summary: Get lists of domains
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new domain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain'
      responses:
        '201':
          description: Domain created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{ID}:
    patch:
      summary: Update domain
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain'
      responses:
        '200':
          description: Domain updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete domain
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Domain deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'


components:
  parameters:
    ID:
      name: ID
      description: ID of the object
      in: path
      required: true
      schema:
        type: integer
    filterID:
      name: ID
      description: Filter by ID
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/filterIntList'
  schemas:
    filterIntList:
      type: string
      pattern: '^[\d]*(,[\d]*)*$'
    ID:
      description: Unique ID of the object
      type: integer
      readOnly: true
    date:
      type: string
      pattern: '^\d{4}-\d{2}-\d{2}$'
    areaData:
      type: object
      additionalProperties: false
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        dataType:
          type: integer
          description: Type of data stored (0=User, 1=Domain, 2=Independent)
        masterPath:
          type: string
          maxLength: 256
          description: Path of the master data area. Can only be set on creation.
        slavePath:
          type: string
          maxLength: 256
          description: Path of slave data area. Can only be set on creation.
        accelPath:
          type: string
          maxLength: 256
          description: Path of accelerated database
          nullable: true
        maxSpace:
          type: integer
          description: Storage size in Megabytes
        maxFiles:
          type: integer
          description: Maximum number of files
        storeLevels:
          type: integer
          description: Directory structure depth
          minimum: 1
          maximum: 4
    areaList:
      type: array
      items:
        $ref: '#/components/schemas/areaData'
    domain:
      type: object
      additionalProperties: false
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        orgID:
          type: integer
          default: 0
        domainname:
          type: string
          maxLength: 64
        password:
          type: string
          maxLength: 40
          default: ""
        homedir:
          type: string
          maxLength: 128
          readOnly: True
          default: ""
        media:
          type: string
          maxLength: 64
          default: ""
        maxSize:
          type: integer
        maxUser:
          type: integer
        title:
          type: string
          maxLength: 128
          default: ""
        address:
          type: string
          maxLength: 128
          default: ""
        adminName:
          type: string
          maxLength: 32
          default: ""
        tel:
          type: string
          maxLength: 64
          default: ""
        createDay:
          $ref: '#/components/schemas/date'
        endDay:
          $ref: '#/components/schemas/date'
        domainStatus:
          type: integer
          description: Domain status (0=Normal, 1=Suspended)
          default: 0
        domainType:
          type: integer
          description: Domain type (0=Normal, 1=Alias)
          default: 0
        mailBackup:
          type: boolean
          description: Mail backup privilege
        mailMonitor:
          type: boolean
          description: Mail monitor privilege
        ignoreCheckingUser:
          type: boolean
          description: Ignore checking user privilege
        mailSubSystem:
          type: boolean
          description: Mail subsystem privilege
        netDisk:
          type: boolean
        areaID:
          writeOnly: True
          type: integer
          description: In which data area to create the domain. Can only be used on creation.


  responses:
    ServerError:
      description: An error occured while processing the request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: String representation of the exception
    InvalidRequest:
      description: Validation of input parameters failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                description: List of errors encountered during validation
                items:
                  type: string
    DatabaseError:
      description: The database query failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Description of the error
    NotFound:
      description: The requested resource could not be found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

tags:
  - name: Misc
    description: Miscellaneous and organizational endpoints
