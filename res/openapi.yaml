openapi: 3.0.0
info:
  title: grammm Admin API
  version: 0.20.1
servers:
  - url: '/api/v1'
    description: Default deployment path

paths:
  /status:
    summary: API state check
    get:
      summary: Check API connectivity and status
      tags:
        - Misc
      responses:
        '200':
          description: API status message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  database:
                    type: boolean
                    description: Whether the database connection is initialized
                  ldap:
                    type: boolean
                    description: Whether the LDAP connection is initialized
              example:
                message: API is operational

  /about:
    get:
      summary: Get general information about the backend
      tags:
        - Misc
      responses:
        '200':
          description: Return information
          content:
            application/json:
              schema:
                type: object
                properties:
                  API:
                    description: Version of the API (according to the specification)
                    type: string
                  backend:
                    description: Version of the implementation
                    type: string

  /login:
    post:
      summary: Login user
      tags:
        - Misc
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              anyOf:
                - type: object
                  required: [user, pass]
                  properties:
                    user:
                      type: string
                      description: Username
                    pass:
                      type: string
                      description: User password
                - type: string
                  description: Workaround for flask/openapi
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  grammmAuthJwt:
                    type: string
                    description: API access token
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          description: Login failed
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /profile:
    get:
      summary: Get information about currently logged in user
      tags:
        - Misc
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Profile data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                      realName:
                        type: string
                  capabilities:
                    type: array
                    description: List of capabilities the current user has
                    items:
                      type: string

  /passwd:
    put:
      summary: Change current users password
      tags:
        - Misc
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [new, old]
              properties:
                new:
                  type: string
                  description: The new password
                old:
                  type: string
                  description: The old password
                user:
                  type: string
                  description: Set password for a specific user (use inline authentication)
      responses:
        '200':
          description: Password updated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          description: Authentication failed
        '403':
          description: Incorrect old password
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/dashboard:
    get:
      summary: Get System dashboard data
      tags:
        - System Admin/Dashboard
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  disks:
                    description: List of disks
                    type: array
                    items:
                      type: object
                      description: Disk statistics.
                      properties:
                        percent:
                          type: number
                          description: Percentage of used memory
                        total:
                          description: Total disk space (bytes)
                          type: integer
                        used:
                          description: Used disk space (bytes)
                          type: integer
                        free:
                          description: Free disk space (bytes)
                          type: integer
                        device:
                          type: string
                        mountpoint:
                          type: string
                        filesystem:
                          type: string
                  load:
                    type: array
                    description: Load averages (1 / 5 / 15 minutes)
                    items:
                      type: number
                  cpuPercent:
                    description: Current CPU usage in percent
                    type: object
                    properties:
                      user:
                        type: number
                        description: Percentage of user CPU time
                      system:
                        type: number
                        description: Percentage of system CPU time
                      io:
                        type: number
                        description: Percentage of CPU time used for IO operations
                      interrupt:
                        type: number
                        description: Percentage of CPU time used by interrupts
                      steal:
                        type: number
                        description: Percentage of CPU time spent waiting for the hypervisor
                      idle:
                        type: number
                        description: Idle CPU time
                  memory:
                    description: RAM statistics
                    type: object
                    properties:
                      percent:
                        description: Percent of used memory
                        type: number
                      total:
                        description: Total memory (bytes)
                        type: integer
                      free:
                        description: Unused memory (bytes)
                        type: integer
                      used:
                        description: Memory used by applications (bytes)
                        type: integer
                      buffer:
                        description: Memory used for buffers (bytes)
                        type: integer
                      cache:
                        description: Memory used for cached data (bytes)
                        type: integer
                      available:
                        description: Memory that is available for applications (bytes)
                  swap:
                    description: Swap statistics
                    type: object
                    properties:
                      percent:
                        description: Percentage of used swap memory
                        type: number
                      total:
                        description: Total swap memory (bytes)
                        type: integer
                      free:
                        description: Available swap memory (bytes)
                        type: integer
                      used:
                        description: Used swap memory (bytes)
                        type: integer
                  booted:
                    allOf:
                      - $ref: '#/components/schemas/dateTime'
                      - description: Time the machine was booted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/dashboard/services:
    get:
      summary: Get list of services
      tags:
        - System Admin/Dashboard
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of services returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    description: List of systemd services
                    type: array
                    items:
                      $ref: '#/components/schemas/service'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/dashboard/services/{unit}:
    get:
      summary: Get information about a specific service
      tags:
        - System Admin/Dashboard
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/systemdUnit'
      responses:
        '200':
          description: Inforamtion about service returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/dashboard/services/{unit}/{action}:
    post:
      summary: Send signal to a service
      tags:
        - System Admin/Dashboard
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/systemdUnit'
        - name: action
          description: Signal to send
          in: path
          required: true
          schema:
            type: string
            enum: [start, stop, restart, reload, enable, disable]
      responses:
        '201':
          description: Signal was sent
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/dbconf/:
    get:
      summary: Get list of services
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of services returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/dbconf/commands:
    get:
      summary: Get lists of allowed commit commands
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Commands returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: array
                    description: List of commands allowed for key commits
                    items:
                      type: string
                  file:
                    type: array
                    description: List of commands allowed for file commits
                    items:
                      type: string
                  service:
                    type: array
                    description: List of commands allowed for service commits
                    items:
                      type: string


  /system/dbconf/{service}/:
    get:
      summary: Get list of configuration files for service
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/dbConfService'
      responses:
        '200':
          description: List of files returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Rename or merge service
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/dbConfService'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New service name. If a service with this name exists, configurations are merged
      responses:
        '200':
          description: Service renamed
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete service configurations
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/dbConfService'
      responses:
        '200':
          description: Service removed
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/dbconf/{service}/{file}/:
    get:
      summary: Get configuration file
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/dbConfService'
        - $ref: '#/components/parameters/dbConfFile'
      responses:
        '200':
          description: Configuration file returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/dbConfFile'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    put:
      summary: Upload configuration file. If the file exists it is overwritten
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/dbConfService'
        - $ref: '#/components/parameters/dbConfFile'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/dbConfFile'
      responses:
        '200':
          description: File created/updated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update or rename configuration file
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/dbConfService'
        - $ref: '#/components/parameters/dbConfFile'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New file name
                data:
                  $ref: '#/components/schemas/dbConfFile'
      responses:
        '200':
          description: File created/updated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete configuration file
      tags:
        - System Admin/DBConf
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/dbConfService'
        - $ref: '#/components/parameters/dbConfFile'
      responses:
        '200':
          description: File deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/domains:
    get:
      summary: Get lists of domains
      tags:
        - System Admin/Domains
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/verbosity'
        - $ref: '#/components/parameters/queryLimit'
        - $ref: '#/components/parameters/queryOffset'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/matchFields'
        - name: sort
          description: Sort by attribute. Can be given multiple times.
          in: query
          schema:
            type: string
            pattern: '^(ID|domainname|orgID|maxUser|title|address|adminName|tel|domainStatus)(,(a|de)sc)?$'
        - $ref: '#/components/parameters/filterID'
        - name: orgID
          description: Filter by one or more organization IDs
          in: query
          explode: false
          schema:
            $ref: '#/components/schemas/intList'
        - name: domainname
          description: Filter by domainname
          in: query
          schema:
            type: string
        - name: maxUser
          description: Filter by number of maximum users
          in: query
          explode: false
          schema:
            $ref: '#/components/schemas/intRange'
        - name: title
          description: Filter by domain title
          in: query
          schema:
            type: string
        - name: address
          description: Filter by domain address property
          in: query
          schema:
            type: string
        - name: adminName
          description: Filter by admin name
          in: query
          schema:
            type: string
        - name: tel
          description: Filter by telephone number
          in: query
          schema:
            type: string
        - name: domainStatus
          description: Filter by one or more domain status values
          in: query
          explode: false
          schema:
            $ref: '#/components/schemas/intList'
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new domain
      tags:
        - System Admin/Domains
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain'
      responses:
        '201':
          description: Domain created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/domains/{domainID}:
    get:
      summary: Get detailed info about domain
      tags:
        - System Admin/Domains
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/verbosity'
      responses:
        '200':
          description: Domain returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update domain
      tags:
        - System Admin/Domains
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain'
      responses:
        '200':
          description: Domain updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete domain
      description: Removes domain (purge=true) or marks it as deleted (purge=false)
      tags:
        - System Admin/Domains
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - name: purge
          in: query
          required: false
          description: Permanently delete the domain
          schema:
            type: boolean
            default: false
        - name: deleteFiles
          in: query
          required: false
          description: Delete files from disk when purging
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Domain deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/users:
    get:
      summary: Get list of all users
      tags:
        - System Admin/Domains
      security:
        - JWTCookie: []
      responses:
        '200':
          description: User list returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/roles/permissions:
    get:
      summary: Get list of available permissions
      tags:
        - System Admin/Roles
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List with permissions returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
                      description: Name of the permission

  /system/roles:
    get:
      summary: Get list of available roles
      tags:
        - System Admin/Roles
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/verbosity'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/matchFields'
        - name: sort
          in: query
          description: Sort by attribute. Can be given multiple times.
          schema:
            type: string
            pattern: '^(ID|name|description)(,(a|de)sc)?$'
        - $ref: '#/components/parameters/filterID'
        - name: name
          description: Filter by name
          in: query
          schema:
            type: string
        - name: description
          description: Filter by description
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of roles returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/adminRole'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create a new role
      tags:
        - System Admin/Roles
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adminRoleWrite'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminRole'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/roles/{ID}:
    get:
      summary: Get role
      tags:
        - System Admin/Roles
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/verbosity'
      responses:
        '200':
          description: List of roles returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminRole'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update a role
      tags:
        - System Admin/Roles
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/adminRoleWrite'
      responses:
        '200':
          description: Role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/adminRole'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete role
      tags:
        - System Admin/Roles
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Role deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/license:
    get:
      summary: Get information about the currently installed License
      tags:
        - System Admin/License
      security:
        - JWTCookie: []
      responses:
        '200':
          description: License information returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    put:
      summary: Upload new license file
      tags:
        - System Admin/License
      security:
        - JWTCookie: []
      responses:
        '200':
          description: License updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/license'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/license/certificate.pem:
    get:
      description: Download the certificate file
      tags:
        - System Admin/License
      security:
        - JWTCookie: []
      responses:
        '200':
          description: License data returned
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/logs:
    get:
      summary: Get available log files
      tags:
        - System Admin/Logs
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of log files returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/logs/{file}:
    get:
      summary: Get log file content
      description: Returns the n last lines of the log file, similar to the `tail` command line tool
      tags:
        - System Admin/Logs
      security:
        - JWTCookie: []
      parameters:
        - name: file
          in: path
          required: true
          description: Name of the log file
          schema:
            type: string
        - name: n
          in: query
          description: Number of lines to return
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: skip
          in: query
          description: Number of lines to skip
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: after
          in: query
          description: Return all lines after given time. Overrides `n` and `skip`.
          schema:
            $ref: '#/components/schemas/precTime'
      responses:
        '200':
          description: List of log files returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      description: Log file entry
                      properties:
                        level:
                          type: integer
                          description: Priority level number as described in journalctl (1)
                        message:
                          type: string
                          description: Log message
                        time:
                          $ref: '#/components/schemas/precTime'
                        runtime:
                          type: number
                          description: Time since last reboot
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /system/antispam/{path}:
    get:
      summary: Make call to grammm-antispam
      description: Proxies any request including query parameters to the grammm-antispam backend
      tags:
        - Misc
      security:
        - JWTCookie: []
      parameters:
        - name: path
          in: path
          description: grammm-antispam endpoint to query
          required: true
          schema:
            type: string
      responses:
        '403':
          description: Insufficient privileges or endpoint not allowed
        '503':
          description: Connection to grammm-antispam failed
        default:
          description: Response returned by the grammm-admin backend

  /domains:
    get:
      summary: Get list of domains the user has access to
      tags:
        -  Misc
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of domains
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/domain'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'


  /domains/{domainID}/users:
    get:
      summary: Get lists of users
      tags:
        - Domain Admin/Users
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/verbosity'
        - $ref: '#/components/parameters/queryLimit'
        - $ref: '#/components/parameters/queryOffset'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/matchFields'
        - name: sort
          description: Sort by attribute. Can be given multiple times.
          in: query
          schema:
            type: string
            pattern: '^(ID|username|domainID|pop3_imap|smtp|changePassword|publicAddress)(,(a|de)sc)?$'
        - $ref: '#/components/parameters/filterID'
        - name: username
          description: Filter by username
          in: query
          schema:
            $ref: '#/components/schemas/intList'
        - $ref: '#/components/parameters/propnames'
      responses:
        '200':
          description: Data returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new user
      tags:
        - Domain Admin/Users
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userInit'
      responses:
        '201':
          description: Domain created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}:
    get:
      summary: Get information about a specific user
      tags:
        - Domain Admin/Users
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/verbosity'
      responses:
        '200':
          description: User data returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update user
      tags:
        - Domain Admin/Users
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete user
      tags:
        - Domain Admin/Users
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/domainID'
        - name: deleteFiles
          description: Delete user files on disk
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: User deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}/storeProps:
    get:
      summary: Get user store properties
      tags:
        - Domain Admin/Users
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/userID'
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/propnames'
      responses:
        '200':
          description: Property values returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/propvals'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}/password:
    put:
      summary: Set user password
      tags:
        - Domain Admin/Users
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                new:
                  type: string
                  description: New password
      responses:
        '200':
          description: User password updated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/users/{userID}/downsync:
    put:
      summary: Update user from LDAP
      tags:
        - Domain Admin/Users
        - LDAP
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
        - name: ID
          in: query
          required: false
          description: Optional LDAP object ID
          schema:
            type: string
      responses:
        '200':
          description: Synchronization successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'


  /domains/{domainID}/users/{userID}/roles:
    patch:
      summary: Update user roles
      tags:
        - System Admin/Roles
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/userID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  description: List of role IDs the user is associated with
                  items:
                    type: integer
      responses:
        '200':
          description: Role association updated
          content:
            application/json:
             schema:
              type: object
              properties:
                data:
                  type: array
                  description: List of role references
                  items:
                    type: object
                    properties:
                      ID:
                        type: integer
                        description: ID of the role
                      name:
                        type: string
                        description: Name of the role
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/mlists:
    get:
      summary: Get list of mailing lists
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/verbosity'
        - $ref: '#/components/parameters/queryLimit'
        - $ref: '#/components/parameters/queryOffset'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/matchFields'
        - name: sort
          description: Sort by attribute. Can be given multiple times.
          in: query
          schema:
            type: string
            pattern: '^(ID|listname|listType|domainID|listPrivilege)(,(a|de)sc)?$'
        - $ref: '#/components/parameters/filterID'
        - name: listname
          description: Filter by list name
          in: query
          schema:
            type: string
        - name: listType
          description: Filter by one or more list types
          in: query
          schema:
            $ref: '#/components/schemas/intList'
        - name: listPrivilege
          description: Filter by one or more list privilege types
          in: query
          schema:
            $ref: '#/components/schemas/intList'
      tags:
        - Domain Admin/MLists
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of MLists returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/mlistRead'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new mailing list
      parameters:
        - $ref: '#/components/parameters/domainID'
      tags:
       - Domain Admin/MLists
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mlistWrite'
      responses:
        '201':
          description: Mailing list created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mlistRead'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/mlists/{ID}:
    get:
      summary: Get information about a mailing list
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/verbosity'
      tags:
        - Domain Admin/MLists
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Mailing list returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mlistRead'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update mailing list
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/ID'
      tags:
        - Domain Admin/MLists
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mlistWrite'
      responses:
        '200':
          description: Mailing list updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mlistRead'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete mailing list
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/ID'
      tags:
        - Domain Admin/MLists
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Mailing list deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/classes:
    get:
      summary: Get list of classes
      tags:
        -  Domain Admin/Classes
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/verbosity'
        - $ref: '#/components/parameters/queryLimit'
        - $ref: '#/components/parameters/queryOffset'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/matchFields'
        - name: sort
          description: Sort by attribute. Can be given multiple times.
          in: query
          schema:
            type: string
            pattern: '^(ID|classname|listname)(,(a|de)sc)?$'
        - $ref: '#/components/parameters/filterID'
        - name: classname
          description: Filter by classname
          in: query
          schema:
            type: string
        - name: listname
          description: Filter by listname
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of classes returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/classRead'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new class
      tags:
        - Domain Admin/Classes
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/classWrite'
      responses:
        '201':
          description: Class created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/classRead'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/classes/testFilter:
    post:
      summary: Test class filter specification
      tags:
        - Domain Admin/Classes
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/classFilters'
      responses:
        '200':
          description: List of users matching the filter returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          $ref: '#/components/schemas/ID'
                        username:
                          type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/classes/tree:
    get:
      summary: Generate class hierarchy tree
      tags:
        - Domain Admin/Classes
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
      responses:
        '200':
          description: Class tree returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/classTreeElement'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/classes/{ID}:
    get:
      summary: Get information about class
      tags:
        - Domain Admin/Classes
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/verbosity'
      responses:
        '200':
          description: Class returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/classRead'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Modify class
      tags:
        - Domain Admin/Classes
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/ID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/classWrite'
      responses:
        '200':
          description: Class updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/classRead'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete class
      tags:
        - Domain Admin/Classes
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Class deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/folders:
    get:
      summary: Get list of public folders
      parameters:
        - $ref: '#/components/parameters/domainID'
      tags:
        - Domain Admin/Folders
      security:
        - JWTCookie: []
      responses:
        '200':
          description: List of public folders returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/publicFolder'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create a new public folder
      parameters:
        - $ref: '#/components/parameters/domainID'
      tags:
        - Domain Admin/Folders
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [displayname, container, comment]
              additionalProperties: false
              properties:
                displayname:
                  type: string
                  description: Name of the folder
                container:
                  type: string
                  description: Container class
                  enum: [IPF.Note, IPF.Contact, IPF.Appointment, IPF.Stickynote, IPF.Task]
                comment:
                  type: string
      responses:
        '201':
          description: Folder creation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicFolder'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/folders/{folderID}:
    get:
      summary: Get public folder
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
      tags:
        - Domain Admin/Folders
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Public folder returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicFolder'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update public folder
      tags:
        - Domain Admin/Folders
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                displayname:
                  type: string
                  description: Name of the folder
                container:
                  type: string
                  description: Container class
                  enum: [IPF.Note, IPF.Contact, IPF.Appointment, IPF.Stickynote, IPF.Task]
                comment:
                  type: string
      responses:
        '200':
            description: Folder update successful
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete public folder
      tags:
        - Domain Admin/Folders
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
      responses:
        '200':
          description: Deletion successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/folders/{folderID}/owners:
    get:
      summary: Get list of folder owners
      tags:
        - Domain Admin/Folders
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
      responses:
        '200':
          description: List of owners returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        memberID:
                          type: integer
                          description: Member ID of the owner list
                        displayName:
                          type: string
                          description: Name of member
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Add a user to the owner list
      tags:
        - Domain Admin/Folders
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username]
              additionalProperties: false
              properties:
                username:
                  type: string
                  description: Username (e-mail address) to add to member list
      responses:
        '201':
          description: Creation successful
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/{domainID}/folders/{folderID}/owners/{memberID}:
    delete:
      summary: Remove a user from the owner list
      tags:
        - Domain Admin/Folders
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/domainID'
        - $ref: '#/components/parameters/folderID'
        - name: memberID
          description: Member ID of the owner list
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Member removed
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /domains/ldap/search:
    get:
      summary: Perform LDAP user search
      tags:
        - LDAP
      security:
        - JWTCookie: []
      parameters:
        - name: query
          in: query
          description: Search term
          required: true
          schema:
            type: string
            minLength: 3
      responses:
        '200':
          description: List of users returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          type: string
                          description: LDAP object ID of the person
                        name:
                          type: string
                          description: Display name of the person
                        email:
                          type: string
                          description: E-mail address of the person
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /domains/ldap/importUser:
    post:
      summary: Import user from ldap
      tags:
        - LDAP
      security:
        - JWTCookie: []
      parameters:
        - name: ID
          in: query
          required: true
          description: LDAP object ID of the person to import
          schema:
            type: string
        - name: force
          in: query
          required: false
          description: Force update existing users that are not associated with the LDAP object
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: An existing user was updated with LDAP data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '201':
          description: A new user was created from LDAP data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: The user already exists but is not associated with the LDAP object
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /domains/ldap/check:
    get:
      summary: Check status of ldap imported users
      tags:
        - LDAP
      security:
        - JWTCookie: []
      responses:
        '200':
          description: A list of orphaned users is returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  orphaned:
                    description: List of users whose externID could not be found in LDAP
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          $ref: '#/components/schemas/ID'
                        username:
                          type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      summary: Check status of ldap import users and delete orphaned
      tags:
        - LDAP
      security:
        - JWTCookie: []
      parameters:
        - name: deleteFiles
          description: Delete user files on disk
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Orphaned users were deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    description: List of users that were deleted
                    type: array
                    items:
                      type: object
                      properties:
                        ID:
                          $ref: '#/components/schemas/ID'
                        username:
                          type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /domains/ldap/downsync:
    post:
      summary: Update all LDAP imported users
      tags:
        - LDAP
      security:
        - JWTCookie: []
      responses:
        '200':
          description: Update process successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: List of updated users
                    items:
                      type: object
                      properties:
                        ID:
                          $ref: '#/components/schemas/ID'
                        username:
                          type: string
                        code:
                          type: integer
                          description: HTTP-like status code of the user update
                          enum: [200, 404, 500, 503]
                        message:
                          type: string
                          description: Update message
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /domains/ldap/dump:
    get:
      summary: Dump LDAP object
      tags:
       - LDAP
      security:
        - JWTCookie: []
      parameters:
        - name: ID
          in: query
          required: true
          description: LDAP object ID of the person to import
          schema:
            type: string
      responses:
        '200':
          description: LDAP object description returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /system/mconf/ldap:
    get:
      summary: Get the current LDAP configuration
      tags:
        - LDAP
        - System Admin/MConf
      security:
        - JWTCookie: []
      responses:
        '200':
          description: LDAP configuration returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  ldapAvailable:
                    type: boolean
                    description: Whether ldap is currently active
                  data:
                    $ref: '#/components/schemas/ldapConfig'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    put:
      summary: Set new LDAP configuration
      tags:
        - LDAP
        - System Admin/MConf
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ldapConfig'
      responses:
        '200':
          description: LDAP configuration updated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    delete:
      summary: Remove LDAP configuration and disable service
      tags:
        - LDAP
        - System Admin/MConf
      security:
        - JWTCookie: []
      responses:
        '200':
          description: LDAP deactivated
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /system/orgs:
    get:
      summary: Get a list of organizations
      tags:
        - System Admin/Organizations
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/verbosity'
        - $ref: '#/components/parameters/queryLimit'
        - $ref: '#/components/parameters/queryOffset'
        - $ref: '#/components/parameters/match'
        - $ref: '#/components/parameters/matchFields'
        - name: sort
          description: Sort by attribute. Can be given multiple times.
          in: query
          schema:
            type: string
            pattern: '^(ID|name|description)(,(a|de)sc)?$'
        - name: name
          description: Filter by name
          in: query
          schema:
            type: string
        - name: description
          description: Filter by description
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of organizations returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/org'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    post:
      summary: Create new organization
      tags:
        - System Admin/Organizations
      security:
        - JWTCookie: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org'
      responses:
        '201':
          description: Organization created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

  /system/orgs/{ID}:
    get:
      summary: Get detailed information about an organization
      tags:
        - System Admin/Organizations
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
        - $ref: '#/components/parameters/verbosity'
      responses:
        '200':
          description: LDAP configuration returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/org'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    patch:
      summary: Update organization
      tags:
        - System Admin/Organizations
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org'
      responses:
        '200':
          description: Organization updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'
    delete:
      summary: Delete organization
      description: Delete the organization. Associated domains are made organizationless (orgID=0)
      tags:
        - System Admin/Organizations
      security:
        - JWTCookie: []
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Organization deleted
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/DatabaseError'

components:
  securitySchemes:
    JWTCookie:
      type: apiKey
      in: cookie
      name: grammmAuthJwt
  parameters:
    ID:
      name: ID
      description: ID of the object
      in: path
      required: true
      schema:
        type: integer
    domainID:
      name: domainID
      description: ID of the domain
      in: path
      required: true
      schema:
        type: integer
    userID:
      name: userID
      description: ID of the user
      in: path
      required: true
      schema:
        type: integer
    folderID:
      name: folderID
      description: ID of the folder
      in: path
      required: true
      schema:
        type: integer
    filterID:
      name: ID
      description: Filter one or more IDs
      in: query
      required: false
      style: form
      explode: false
      schema:
        $ref: '#/components/schemas/intList'
    systemdUnit:
      name: unit
      description: Name of the unit to signal
      in: path
      required: true
      schema:
        type: string
    dbConfService:
      name: service
      description: Name of the service to configure
      in: path
      required: true
      schema:
        type: string
    dbConfFile:
      name: file
      description: Name of the configuration file
      in: path
      required: true
      schema:
        type: string
    match:
      name: match
      description: Match by substring
      in: query
      schema:
        type: string
    matchFields:
      name: matchFields
      description: Comma separated list of attributes to restrict matching to.
      in: query
      schema:
        type: string
    verbosity:
      name: level
      in: query
      description: Set detail level of return value. Usually ranges from 0 to 2.
      schema:
        type: integer
    queryLimit:
      name: limit
      in: query
      description: Maximum number of results to return
      schema:
        type: integer
        default: 50
    queryOffset:
      name: offset
      in: query
      description: Index of the first element to return
      schema:
        type: integer
        default: 0
    propnames:
      name: properties
      description: Comma separated list of properties to return
      in: query
      schema:
        type: string
  schemas:
    ID:
      description: Unique ID of the object
      type: integer
      readOnly: true
    intList:
      type: array
      items:
        type: integer
    intRange:
      type: array
      maxItems: 2
      items:
        type: integer
    date:
      type: string
      description: Date string
      pattern: '^\d{4}-\d{2}-\d{2}$'
    dateTime:
      type: string
      description: Date string with time
      pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$'
      nullable: True
    precTime:
      type: string
      description: Precise date/time string including fractional seconds
      pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{1,6}$'
    domain:
      type: object
      additionalProperties: false
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        orgID:
          type: integer
          default: 0
        domainname:
          type: string
          maxLength: 64
        homedir:
          type: string
          maxLength: 128
          readOnly: True
          default: ""
        maxUser:
          type: integer
        title:
          type: string
          maxLength: 128
          default: ""
        address:
          type: string
          maxLength: 128
          default: ""
        adminName:
          type: string
          maxLength: 32
          default: ""
        tel:
          type: string
          maxLength: 64
          default: ""
        endDay:
          $ref: '#/components/schemas/date'
        domainStatus:
          type: integer
          description: Domain status (0=Normal, 1=Suspended, 2=Out Of Date, 3=Deleted)
          default: 0
    org:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        description:
          type: string
          nullable: true
    propvals:
      type: object
      description: User properties as name/value pairs
      additionalProperties:
        anyOf:
          - type: string
          - type: integer
          - type: number
    user:
      type: object
      additionalProperties: false
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        username:
          type: string
          maxLength: 128
        domainID:
          type: integer
          readOnly: true
        roles:
          type: array
          description: List of role associated with the user
          items:
            type: object
            readOnly: true
            properties:
              ID:
                $ref: '#/components/schemas/ID'
              name:
                type: string
        properties:
          $ref: '#/components/schemas/propvals'
        aliases:
          type: array
          description: List of aliases for this user
          items:
            type: string
        pop3_imap:
          type: boolean
          description: POP3/IMAP privilege
        smtp:
          type: boolean
          description: SMTP privilege
        changePassword:
          type: boolean
          description: Password changing privilege
        publicAddress:
          type: boolean
          description: Public address privilege
        ldapID:
          type: string
          nullable: true
          description: Base64 encoded LDAP object ID
    userInit:
      type: object
      additionalProperties: false
      properties:
        username:
          type: string
          maxLength: 128
        password:
          type: string
          description: Initial password
        domainID:
          type: integer
          readOnly: true
        properties:
          type: object
          description: User properties as name/value pairs
          additionalProperties:
            anyOf:
              - type: string
              - type: integer
              - type: number
        aliases:
          type: array
          description: List of aliases for this user
          items:
            type: string
        pop3_imap:
          type: boolean
          description: POP3/IMAP privilege
        smtp:
          type: boolean
          description: SMTP privilege
        changePassword:
          type: boolean
          description: Password changing privilege
        publicAddress:
          type: boolean
          description: Public address privilege
    userUpdate:
      type: object
      additionalProperties: false
      properties:
        username:
          type: string
          maxLength: 128
        properties:
          type: object
          description: User properties as name/value pairs. Note that properties not contained in this object will be deleted.
          additionalProperties:
            anyOf:
              - type: string
              - type: integer
              - type: number
        aliases:
          type: array
          description: List of aliases for this user
          items:
            type: string
        pop3_imap:
          type: boolean
          description: POP3/IMAP privilege
        smtp:
          type: boolean
          description: SMTP privilege
        changePassword:
          type: boolean
          description: Password changing privilege
        publicAddress:
          type: boolean
          description: Public address privilege
        ldapID:
          type: string
          description: Detach imported user from LDAP object
          nullable: true
          enum: [null]
    publicFolder:
      type: object
      properties:
        folderid:
          type: string
        displayname:
          type: string
        comment:
          type: string
        creationtime:
          $ref: '#/components/schemas/dateTime'
        container:
          type: string
    service:
      type: object
      properties:
        state:
          type: string
        substate:
          type: string
        description:
          type: string
          nullable: true
        autostart:
          type: string
          description: State of the unit file
        since:
          $ref: '#/components/schemas/dateTime'
        name:
          type: string
          description: Name of the service
        unit:
          type: string
          description: Name of the systemd unit. Required for action endpoints.
    adminPermission:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        permission:
          type: string
    adminRole:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          maxLength: 32
        description:
          type: string
          nullable: true
          maxLength: 256
        permissions:
          type: array
          description: List of permissions associated with the role
          items:
            $ref: '#/components/schemas/adminPermission'
        users:
          type: array
          description: List of users associated with the role
          items:
            type: object
            properties:
              ID:
                $ref: '#/components/schemas/ID'
              username:
                type: string
    adminRoleWrite:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/adminPermission'
        users:
          type: array
          description: List of user IDs to associate with the role
          items:
            type: integer
    license:
      type: object
      properties:
        product:
          type: string
          nullable: true
          description: Product name
        maxUsers:
          type: integer
          description: License user limit
        notBefore:
          $ref: '#/components/schemas/dateTime'
        notAfter:
          $ref: '#/components/schemas/dateTime'
        currentUsers:
          type: integer
          description: Number of currently existing users
        certificate:
          type: string
          nullable: true
          description: Download link for the certificate
    ldapConfig:
      type: object
      properties:
        disabled:
          type: boolean
          description: Disable LDAP service
          default: False
        connection:
          type: object
          properties:
            server:
              type: string
              description: Address of the LDAP server to connect to
            bindUser:
              type: string
              description: DN of the user to perform initial bind with
            bindPass:
              type: string
              description: Password for bindUser
            starttls:
              type: boolean
              description: Whether to initiate a StartTLS connection
        baseDn:
          type: string
          description: Base DN to use for user search
        objectID:
          type: string
          description: Name of an attribute that uniquely idetifies an LDAP object
        users:
          type: object
          description: Configuration for user search
          properties:
            username:
              type: string
              description: Name of the attribute that corresponds to the username (e-mail address)
            displayName:
              type: string
              description: Name of the attribute that contains the name
            filters:
              type: array
              description: List of additional filter expressions to use for user search
              items:
                type: string
                example: 'objectclass=person'
            filter:
              type: string
              description: LDAP search filter to apply to user lookup
              example: '(&(objectclass=person)(mailPrimaryAddress=*))'
            templates:
              type: array
              description: List of mapping templates to use
              items:
                type: string
                description: Name of a template defined in res/ldapTemplates.yaml
            attributes:
              type: object
              description: LDAP attribute -> PropTag mapping to used for LDAP import. Any mappings specified take precendence over active templates
              additionalProperties:
                type: string
                description: Name of the PropTag the atribute maps to
            defaultQuota:
              type: integer
              description: Storage quota of imported users if no mapping exists
            searchAttributes:
              type: array
              description: List of attributes to use for searching
              items:
                type: string
                description: LDAP attribute name
    mlistRead:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        listname:
          type: string
          description: Name or e-mail address of the list
        listType:
          type: integer
          enum: [0, 1, 2, 3]
          description: Type of mailing list (0=Normal, 2=Domain, 3=Class)
        listPrivilege:
          type: integer
          enum: [0, 1, 2, 3, 4]
          description: Sender privilege of list (0=All, 1=Internal, 2=Domain, 3=Specific, 4=Outgoing)
        associations:
          type: array
          description: Recipients, only available if listType=0
          items:
            type: string
            description: E-Mail address of recipient
        specifieds:
          type: array
          description: Senders, only available if listPrivilege=3
          items:
            type: string
            description: E-Mail address of sender
        class:
          type: object
          nullable: true
          description: Associated class, only available if listType=3
          properties:
            ID:
              $ref: '#/components/schemas/ID'
            classname:
              type: string
    mlistWrite:
      type: object
      properties:
        listname:
          type: string
          description: Name or e-mail address of the list
        listType:
          type: integer
          enum: [0, 2, 3]
          description: Type of mailing list (0=Normal, 2=Domain, 3=Class)
        listPrivilege:
          type: integer
          enum: [0, 1, 2, 3, 4]
          description: Sender privilege of list (0=All, 1=Internal, 2=Domain, 3=Specific, 4=Outgoing)
        associations:
          type: array
          description: Recipients, only available if listType=0
          items:
            type: string
            description: E-Mail address of recipient
        specifieds:
          type: array
          description: Senders, only available if listPrivilege=3
          items:
            type: string
            description: E-Mail address of sender
        class:
          type: integer
          description: ID of the associated class, only available if listType=3
    classRead:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        classname:
          type: string
        listname:
          type: string
          nullable: true
          description: Name of the associated mlist
        parentClasses:
          type: array
          description: List of parent classes
          items:
            type: object
            properties:
              ID:
                $ref: '#/components/schemas/ID'
              classname:
                type: string
        children:
          type: array
          description: List of child classes
          items:
            type: object
            properties:
              ID:
                $ref: '#/components/schemas/ID'
              classname:
                type: string
        members:
          type: array
          description: List of class members
          items:
            type: string
            description: E-Mail address of the class members
        filters:
          $ref: '#/components/schemas/classFilters'
    classWrite:
      type: object
      properties:
        classname:
          type: string
        parentClasses:
          type: array
          description: List of parent class IDs
          items:
            type: integer
        members:
          type: array
          description: List of class members
          items:
            type: string
            description: E-Mail address of the class members
        filters:
          $ref: '#/components/schemas/classFilters'
    classTreeElement:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        children:
          type: array
          items:
            type: object
    classFilters:
      type: array
      nullable: true
      description: List of filter lists, which are joined by logical `and` (CNF)
      items:
        type: array
        description: list of filters, which are joined by logical `or`
        items:
          type: object
          required: [prop, op]
          description: Filter specification. Exactly one of `c` and `p` must be specified
          properties:
            prop:
              type: string
              description: Column name or property to test
            op:
              type: string
              description: Comparison operator
              enum: [eq, ne, lt, le, gt, ge, li, nl, ex, nx]
            val:
              type: string
              description: Value used for comparison (binary operators)
    dbConfFile:
      type: object
      additionalProperties:
        type: string
  responses:
    ServerError:
      description: An error occured while processing the request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: String representation of the exception
    InvalidRequest:
      description: Validation of input parameters failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                description: List of errors encountered during validation
                items:
                  type: string
    DatabaseError:
      description: The database query failed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Description of the error
    ServiceUnavailable:
      description: One of the required external services is unavailable
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Description of the error
    NotFound:
      description: The requested resource could not be found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

tags:
  - name: System Admin/Dashboard
    description: Endpoints for the system admin dashboard
  - name: System Admin/DBConf
    description: Endpoints for database stored configuration management
  - name: System Admin/Domains
    description: Endpoints for domain management
  - name: System Admin/License
    description: Endpoints for license management
  - name: System Admin/Logs
    description: Endpoints for viewing logs
  - name: System Admin/MConf
    description: Endpoints for accessing managed configurations
  - name: System Admin/Organizations
    description: Endpoints for organization management
  - name: System Admin/Roles
    description: Endpoints for user role and permission management
  - name: Domain Admin/Classes
    description: Endpoints for class and hierarchy management
  - name: Domain Admin/Folders
    description: Endpoints for public folder management
  - name: Domain Admin/MLists
    description: Endpoints for mailing list management
  - name: Domain Admin/Users
    description: Endpoints for user management
  - name: LDAP
    description: Endpoints for LDAP operations
  - name: Misc
    description: Miscellaneous and organizational endpoints
